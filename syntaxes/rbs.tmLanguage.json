{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "rbs",
  "patterns": [
    {
      "begin": "(?<!^\\.|[^.]\\.|::)\\b(class)\\b(?![?!])",
      "beginCaptures": {
        "1": {
          "name": "keyword.declaration.class.begin.rbs"
        }
      },
      "end": "(?<!\\.|::|`)\\b((end))\\b(?![?!:])",
      "endCaptures": {
        "1": {
          "name": "keyword.control.end.rbs"
        },
        "2": {
          "name": "keyword.declaration.class.end.rbs"
        }
      },
      "name": "meta.class.rbs",
      "patterns": [
        {
          "match": "\\G\\s+((?:(?:::)?[A-Z][\\w]*)+)(?:\\s*(<)\\s*((?:(?:::)?[A-Z][\\w]*)+))?",
          "captures": {
            "1": {
              "name": "entity.name.type.class.rbs",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            },
            "2": {
              "name": "punctuation.separator.inheritance.rbs"
            },
            "3": {
              "name": "entity.other.inherited-class.rbs",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          }
        },
        {
          "include": "$self"
        }
      ]
    },
    {
      "begin": "(?<!^\\.|[^.]\\.|::)\\b(module)\\b(?![?!])",
      "beginCaptures": {
        "1": {
          "name": "keyword.declaration.module.begin.rbs"
        }
      },
      "end": "(?<!\\.|::|`)\\b((end))\\b(?![?!:])",
      "endCaptures": {
        "1": {
          "name": "keyword.control.end.rbs"
        },
        "2": {
          "name": "keyword.declaration.module.end.rbs"
        }
      },
      "name": "meta.module.rbs",
      "patterns": [
        {
          "match": "\\G\\s+((?:::)?[A-Z][\\w:]*)",
          "captures": {
            "1": {
              "name": "entity.name.type.module.rbs",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          }
        },
        {
          "include": "$self"
        }
      ]
    },
    {
      "begin": "(?<!^\\.|[^.]\\.|::)\\b(interface)\\b(?![?!])",
      "beginCaptures": {
        "1": {
          "name": "keyword.declaration.interface.begin.rbs"
        }
      },
      "end": "(?<!\\.|::|`)\\b((end))\\b(?![?!:])",
      "endCaptures": {
        "1": {
          "name": "keyword.control.end.rbs"
        },
        "2": {
          "name": "keyword.declaration.interface.end.rbs"
        }
      },
      "name": "meta.interface.rbs",
      "patterns": [
        {
          "match": "\\G\\s+((?:::)?_?[A-Z][\\w:]*)",
          "captures": {
            "1": {
              "name": "entity.name.type.interface.rbs",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          }
        },
        {
          "include": "$self"
        }
      ]
    },
    {
      "begin": "^(\\s*)([$@][A-Za-z_]\\w*|_?[A-Z]\\w*)\\s*(:)",
      "beginCaptures": {
        "2": {
          "patterns": [
            {
              "include": "#variables"
            }
          ]
        },
        "3": {
          "name": "keyword.operator.colon.rbs"
        }
      },
      "end": "^(?!\\1\\s{2,})",
      "patterns": [
        {
          "include": "#has_type"
        }
      ]
    },
    {
      "include": "#literals"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#parens"
    },
    {
      "include": "#braces"
    },
    {
      "include": "#brackets"
    },
    {
      "match": "\\b(public|private)\\b(?![?!])",
      "name": "storage.modifier.rbs"
    },
    {
      "match": "\\b(include|extend|prepend|singleton)\\b(?![?!])",
      "name": "keyword.other.$1.rbs"
    },
    {
      "include": "#attributes"
    },
    {
      "include": "#type_alias"
    },
    {
      "include": "#method_alias"
    },
    {
      "begin": "(?x)\r\n^(\\s*)(def)\\b # the def keyword\r\n(?:\r\n  \\s+ # an optional group of whitespace followed by\u2026\r\n  (\r\n    `?(?>[a-zA-Z_]\\w*(?>\\.|::))? # a method name prefix\r\n\t[^: ]+`? # method name\r\n  )\r\n)?",
      "beginCaptures": {
        "2": {
          "name": "keyword.control.def.rbs"
        },
        "3": {
          "name": "entity.name.function.rbs"
        }
      },
      "end": "^(?!\\1\\s{2,})",
      "patterns": [
        {
          "include": "#colon_operator"
        },
        {
          "include": "#has_type"
        }
      ]
    },
    {
      "include": "#comment"
    }
  ],
  "repository": {
    "parens": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.rbs"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.rbs"
        }
      },
      "patterns": [
        {
          "begin": "(?=[A-Za-z_*?(\\[])",
          "end": "(?=[,)])",
          "patterns": [
            {
              "include": "#parameters"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "include": "$self"
        }
      ]
    },
    "brackets": {
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.brackets.begin.rbs"
        }
      },
      "end": "]",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.brackets.end.rbs"
        }
      },
      "patterns": [
        {
          "match": "(?<!\\.)\\b(in|out|unchecked)\\b(?![?!])",
          "name": "keyword.control.$1.rbs"
        },
        {
          "include": "#literals"
        },
        {
          "include": "#type_or_type-alias"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#punctuation"
        },
        {
          "include": "#brackets"
        },
        {
          "include": "#parens"
        },
        {
          "include": "#braces"
        }
      ]
    },
    "braces": {
      "begin": "{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.braces.begin.rbs"
        }
      },
      "end": "}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.braces.end.rbs"
        }
      },
      "patterns": [
        {
          "include": "#keyword_parameter"
        },
        {
          "include": "#parameter_type"
        },
        {
          "include": "$self"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "include": "#instance_var"
        },
        {
          "include": "#global_var"
        },
        {
          "include": "#constant"
        }
      ]
    },
    "instance_var": {
      "captures": {
        "1": {
          "name": "punctuation.definition.variable.rbs"
        }
      },
      "match": "(@)[a-zA-Z_]\\w*",
      "name": "variable.other.readwrite.instance.rbs"
    },
    "global_var": {
      "captures": {
        "1": {
          "name": "punctuation.definition.variable.rbs"
        }
      },
      "match": "(\\$)[a-zA-Z_]\\w*",
      "name": "variable.other.readwrite.global.rbs"
    },
    "constant": {
      "match": "\\b_?[A-Z]\\w*\\b",
      "name": "variable.other.constant.rbs"
    },
    "literals": {
      "patterns": [
        {
          "include": "#symbol"
        },
        {
          "include": "#number"
        },
        {
          "include": "#boolean"
        },
        {
          "include": "#string"
        }
      ]
    },
    "symbol": {
      "captures": {
        "1": {
          "name": "punctuation.definition.constant.rbs"
        }
      },
      "match": "(?x)\n(?<!:):\n(?>\n  [$a-zA-Z_]\\w*(?>[?!]|=(?![>=]))?\n  |\n  ===?|<=>|>[>=]?|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[]=?\n  |\n  @@?[a-zA-Z_]\\w*\n)",
      "name": "constant.language.symbol.rbs"
    },
    "number": {
      "match": "(?x)\n\\b\n(\n  [\\d](?>_?\\d)*                             # 100_000\n  (\\.(?![^[:space:][:digit:]])(?>_?\\d)*)?   # fractional part\n  ([eE][-+]?\\d(?>_?\\d)*)?                   # 1.23e-4\n  |\n  0\n  (?:\n    [xX]\\h(?>_?\\h)*|\n    [oO]?[0-7](?>_?[0-7])*|\n    [bB][01](?>_?[01])*|\n    [dD]\\d(?>_?\\d)*\n  )                                           # A base indicator can only be used with an integer\n)\\b",
      "name": "constant.numeric.rbs"
    },
    "boolean": {
      "match": "\\b(true|false)\\b(?![?!])",
      "name": "constant.language.boolean.rbs"
    },
    "string": {
      "patterns": [
        {
          "include": "#string_single_quoted"
        },
        {
          "include": "#string_double_quoted"
        }
      ]
    },
    "string_single_quoted": {
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.rbs"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.rbs"
        }
      },
      "name": "string.quoted.single.rbs"
    },
    "string_double_quoted": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.rbs"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.rbs"
        }
      },
      "name": "string.quoted.double.interpolated.rbs"
    },
    "comment": {
      "begin": "#",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.rbs"
        }
      },
      "end": "(?=\\n)",
      "name": "comment.line.number-sign.rbs"
    },
    "operators": {
      "patterns": [
        {
          "include": "#union_operator"
        },
        {
          "include": "#intersectoin_operator"
        },
        {
          "include": "#optional_operator"
        },
        {
          "include": "#rest_operator"
        },
        {
          "include": "#colon_operator"
        },
        {
          "include": "#arrow_operator"
        },
        {
          "include": "#assignment_operator"
        }
      ]
    },
    "union_operator": {
      "match": "\\|",
      "name": "keyword.operator.union.rbs"
    },
    "intersectoin_operator": {
      "match": "&",
      "name": "keyword.operator.intersectoin.rbs"
    },
    "optional_operator": {
      "match": "\\?",
      "name": "keyword.operator.optional.rbs"
    },
    "rest_operator": {
      "match": "\\*\\*?",
      "name": "keyword.operator.rest.rbs"
    },
    "arrow_operator": {
      "match": "->",
      "name": "keyword.operator.arrow.rbs"
    },
    "colon_operator": {
      "match": "(?<!:):(?!:)",
      "name": "keyword.operator.colon.rbs"
    },
    "assignment_operator": {
      "match": "=",
      "name": "keyword.operator.assignment.rbs"
    },
    "punctuation": {
      "patterns": [
        {
          "include": "#namespace_separator"
        },
        {
          "include": "#comma_separator"
        }
      ]
    },
    "namespace_separator": {
      "match": "(::)\\s*(?=[A-Za-z_])",
      "captures": {
        "1": {
          "name": "punctuation.separator.namespace.rbs"
        }
      }
    },
    "comma_separator": {
      "match": ",",
      "name": "punctuation.separator.comma.rbs"
    },
    "type_or_type-alias": {
      "match": "\\b[A-Za-z_]\\w*\\b",
      "name": "storage.type.rbs"
    },
    "parameters": {
      "patterns": [
        {
          "include": "#keyword_parameter"
        },
        {
          "include": "#parameter_type"
        },
        {
          "include": "#parameter_name"
        }
      ]
    },
    "keyword_parameter": {
      "match": "(?<=^|\\s|,|\\(|{)\\s*(\\*\\*?|\\?)?([_a-zA-Z]\\w*[?!]?(:))",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#optional_operator"
            },
            {
              "include": "#rest_operator"
            }
          ]
        },
        "2": {
          "name": "variable.arguments.rbs"
        },
        "3": {
          "name": "punctuation.definition.constant.rbs"
        }
      }
    },
    "parameter_type": {
      "match": "(?<![)\\]?\\w])\\s*(\\*\\*?|\\?)?((?:::)?[A-Za-z_][\\w:]*)(\\?)?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#optional_operator"
            },
            {
              "include": "#rest_operator"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#literals"
            },
            {
              "include": "#namespace_separator"
            },
            {
              "include": "#type_or_type-alias"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#optional_operator"
            }
          ]
        }
      }
    },
    "parameter_name": {
      "match": "(?<=[)\\]?\\w])\\s+([a-z_]\\w*)",
      "captures": {
        "1": {
          "name": "variable.arguments.rbs"
        }
      }
    },
    "attributes": {
      "begin": "^(\\s*)\\b(attr_reader|attr_writer|attr_accessor)\\b(?![?!])(?:\\s+([A-Za-z_]\\w*))?",
      "beginCaptures": {
        "2": {
          "name": "keyword.other.$2.rbs"
        },
        "3": {
          "name": "variable.other.member.rbs"
        }
      },
      "end": "^(?!\\1\\s{2,})",
      "patterns": [
        {
          "include": "#colon_operator"
        },
        {
          "include": "#has_type"
        }
      ]
    },
    "type_alias": {
      "begin": "^(\\s*)\\b(type)\\b(?![?!])(?:\\s+((?:::)?[A-Za-z_][\\w:]*))?",
      "beginCaptures": {
        "2": {
          "name": "keyword.other.type.rbs"
        },
        "3": {
          "patterns": [
            {
              "include": "#namespace_separator"
            },
            {
              "include": "#type_or_type-alias"
            }
          ]
        }
      },
      "end": "^(?!\\1\\s{2,})",
      "patterns": [
        {
          "include": "#assignment_operator"
        },
        {
          "include": "#has_type"
        }
      ]
    },
    "method_alias": {
      "match": "^\\s*\\b(alias)\\b(?![?!])(?:\\s+([^ ]+))?(?:\\s+([^ ]+))?",
      "captures": {
        "1": {
          "name": "keyword.other.alias.rbs"
        },
        "2": {
          "name": "entity.name.function.rbs"
        },
        "3": {
          "name": "entity.name.function.rbs"
        }
      }
    },
    "has_type": {
      "patterns": [
        {
          "include": "#parens"
        },
        {
          "include": "#brackets"
        },
        {
          "include": "#braces"
        },
        {
          "include": "#union_operator"
        },
        {
          "include": "#intersectoin_operator"
        },
        {
          "include": "#optional_operator"
        },
        {
          "include": "#literals"
        },
        {
          "include": "#type_or_type-alias"
        },
        {
          "include": "#namespace_separator"
        },
        {
          "include": "#comment"
        }
      ]
    }
  },
  "scopeName": "source.rbs"
}
