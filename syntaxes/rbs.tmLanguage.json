{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "rbs",
  "patterns": [
    {
      "begin": "(?<!^\\.|[^.]\\.|::)\\b(class)\\b(?![?!])",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.class.begin.rbs"
        }
      },
      "end": "(?<!\\.|::|`)\\b((end))\\b(?![?!:])",
      "endCaptures": {
        "1": {
          "name": "keyword.control.end.rbs"
        },
        "2": {
          "name": "keyword.control.class.end.rbs"
        }
      },
      "name": "meta.class.rbs",
      "patterns": [
        {
          "match": "\\G\\s+((?:(?:::)?[A-Z][\\w]*)+)(?:\\s*(<)\\s*((?:(?:::)?[A-Z][\\w]*)+))?",
          "captures": {
            "1": {
              "name": "entity.name.type.class.rbs",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            },
            "2": {
              "name": "punctuation.separator.inheritance.rbs"
            },
            "3": {
              "name": "entity.other.inherited-class.rbs",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            },
            "4": {
              "name": "punctuation.accessor.singleton.rbs"
            },
            "5": {
              "name": "variable.other.object.rbs",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          }
        },
        {
          "include": "$self"
        }
      ]
    },
    {
      "begin": "(?<!^\\.|[^.]\\.|::)\\b(module)\\b(?![?!])",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.module.begin.rbs"
        }
      },
      "end": "(?<!\\.|::|`)\\b((end))\\b(?![?!:])",
      "endCaptures": {
        "1": {
          "name": "keyword.control.end.rbs"
        },
        "2": {
          "name": "keyword.control.module.end.rbs"
        }
      },
      "name": "meta.module.rbs",
      "patterns": [
        {
          "match": "\\G\\s+((?:::)?[A-Z][\\w:]*)",
          "captures": {
            "1": {
              "name": "entity.name.type.module.rbs",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          }
        },
        {
          "include": "$self"
        }
      ]
    },
    {
      "begin": "(?<!^\\.|[^.]\\.|::)\\b(interface)\\b(?![?!])",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.interface.begin.rbs"
        }
      },
      "end": "(?<!\\.|::|`)\\b((end))\\b(?![?!:])",
      "endCaptures": {
        "1": {
          "name": "keyword.control.end.rbs"
        },
        "2": {
          "name": "keyword.control.interface.end.rbs"
        }
      },
      "name": "meta.interface.rbs",
      "patterns": [
        {
          "match": "\\G\\s+((?:::)?_?[A-Z][\\w:]*)",
          "captures": {
            "1": {
              "name": "entity.name.type.interface.rbs",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          }
        },
        {
          "include": "$self"
        }
      ]
    },
    {
      "captures": {
        "1": {
          "name": "punctuation.separator.namespace.rbs"
        }
      },
      "comment": "Mark as namespace separator if double colons followed by capital letter",
      "match": "(::)\\s*(?=_?[A-Z])"
    },
    {
      "match": "\\b_?[A-Z]\\w*\\b",
      "name": "variable.other.constant.rbs"
    },
    {
      "match": "(?x)\n\\b\n(\n  [\\d](?>_?\\d)*                             # 100_000\n  (\\.(?![^[:space:][:digit:]])(?>_?\\d)*)?   # fractional part\n  ([eE][-+]?\\d(?>_?\\d)*)?                   # 1.23e-4\n  |\n  0\n  (?:\n    [xX]\\h(?>_?\\h)*|\n    [oO]?[0-7](?>_?[0-7])*|\n    [bB][01](?>_?[01])*|\n    [dD]\\d(?>_?\\d)*\n  )                                           # A base indicator can only be used with an integer\n)\\b",
      "name": "constant.numeric.rbs"
    },
    {
      "captures": {
        "1": {
          "name": "punctuation.definition.constant.rbs"
        }
      },
      "comment": "symbols",
      "match": "(?x)\n(?<!:):\n(?>\n  [$a-zA-Z_]\\w*(?>[?!]|=(?![>=]))?\n  |\n  ===?|<=>|>[>=]?|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[]=?\n  |\n  @@?[a-zA-Z_]\\w*\n)",
      "name": "constant.language.symbol.rbs"
    },
    {
      "captures": {
        "1": {
          "name": "punctuation.definition.variable.rbs"
        }
      },
      "match": "(@)[a-zA-Z_]\\w*",
      "name": "variable.other.readwrite.instance.rbs"
    },
    {
      "captures": {
        "1": {
          "name": "punctuation.definition.variable.rbs"
        }
      },
      "match": "(\\$)[a-zA-Z_]\\w*",
      "name": "variable.other.readwrite.global.rbs"
    },
    {
      "match": "->",
      "name": "keyword.operator.arrow.rbs"
    },
    {
      "match": "(?<!:):(?!:)",
      "name": "keyword.operator.colon.rbs"
    },
    {
      "match": "\\|",
      "name": "keyword.operator.union.rbs"
    },
    {
      "match": "&",
      "name": "keyword.operator.intersectoin.rbs"
    },
    {
      "match": "\\?",
      "name": "keyword.operator.optional.rbs"
    },
    {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.rbs"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.rbs"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    {
      "begin": "{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.braces.begin.rbs"
        }
      },
      "end": "}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.braces.end.rbs"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    {
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.brackets.begin.rbs"
        }
      },
      "end": "]",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.brackets.end.rbs"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    {
      "match": "\\b(self)(?=\\.\\w*)",
      "name": "variable.language.self.rbs"
    },
    {
      "match": "\\b(self|instance|bool|untyped|nil|top|bot|void|fail|boolish|true|false)\\b(?![?!])",
      "name": "storage.type.rbs"
    },
    {
      "match": "\\b(public|private)\\b(?![?!])",
      "name": "storage.modifier.rbs"
    },
    {
      "comment": " everything being a method but having a special function is a..",
      "match": "\\b(include|extend|prepend|attr_reader|attr_writer|attr_accessor|alias)\\b(?![?!])",
      "name": "keyword.other.rbs"
    },
    {
      "match": "(?<!\\.)\\b(in|out|unchecked)\\b(?![?!])",
      "name": "keyword.control.$1.rbs"
    },
    {
      "match": "\\*\\*?",
      "name": "storage.type.variable.rbs"
    },
    {
      "captures": {
        "1": {
          "name": "keyword.control.def.rbs"
        },
        "2": {
          "name": "entity.name.function.ruby"
        }
      },
      "match": "(?x)\r\n(?=def\\b) # an optimization to help Oniguruma fail fast\r\n(?<=^|\\s)(def)\\b # the def keyword\r\n(?:\r\n  \\s+ # an optional group of whitespace followed by\u2026\r\n  (\r\n    `?(?>[a-zA-Z_]\\w*(?>\\.|::))? # a method name prefix\r\n\t[^: ]+`?\r\n  )\r\n)?"
    },
    {
      "begin": "(^[ \\t]+)?(?=#)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.whitespace.comment.leading.rbs"
        }
      },
      "end": "(?!\\G)",
      "patterns": [
        {
          "begin": "#",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.rbs"
            }
          },
          "end": "\\n",
          "name": "comment.line.number-sign.rbs"
        }
      ]
    }
  ],
  "repository": {
  },
  "scopeName": "source.rbs"
}
